//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider     = "prisma-client-js"
  output       = "../generated/prisma-client"
  moduleFormat = "esm"
}

generator prismaClassGenerator {
  provider                 = "prisma-class-generator"
  dryRun                   = false
  output                   = "../generated/prisma-class-generator"
  separateRelationFields   = true
  useNonNullableAssertions = false
}

generator erd {
  provider    = "prisma-erd-generator"
  output      = "../generated/ERD.svg"
  ignoreEnums = true
}

enum OtpUseCaseEnum {
  LOGIN
  D2FA
  PHV
}

model User {
  id                          Int               @id() @default(autoincrement())
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt()
  createdBy                   String?
  updatedBy                   String?
  email                       String            @unique()
  password                    String?
  isActive                    Boolean           @default(false)
  activationToken             String?           @unique()
  activationTokenExpiresAt    DateTime?
  resetPasswordToken          String?           @unique()
  resetPasswordTokenExpiresAt DateTime?
  lastLogin                   DateTime?
  hasTwoFA                    Boolean           @default(false)
  twoFAPhoneNumber            String?
  twoFAPPhoneVerified         Boolean           @default(false)
  role                        Role?             @relation(fields: [roleId], references: [id])
  roleId                      Int?
  activatedAt                 DateTime?
  activatedBy                 String?
  deactivatedAt               DateTime?
  deactivatedBy               String?
  Otp                         Otp[]
  Permission2User             Permission2User[]

  @@map("user")
}

model ApiKey {
  id          Int      @id() @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  createdBy   String?
  updatedBy   String?
  name        String   @unique()
  description String?
  key         String   @unique()
  isActive    Boolean  @default(true)
  expiresAt   DateTime

  @@map("api_key")
}

model Otp {
  id        Int            @id() @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt()
  createdBy String?
  updatedBy String?
  user      User           @relation(fields: [userId], references: [id])
  userId    Int
  code      String
  use       OtpUseCaseEnum
  expiresAt DateTime

  @@map("otp")
}

model Role {
  id              Int               @id() @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt()
  createdBy       String?
  updatedBy       String?
  name            String            @unique()
  isActive        Boolean           @default(true)
  Permission2Role Permission2Role[]
  User            User[]

  @@map("role")
}

model Permission {
  id              Int               @id() @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt()
  createdBy       String?
  updatedBy       String?
  name            String            @unique()
  module          String
  isActive        Boolean           @default(true)
  Permission2Role Permission2Role[]
  Permission2User Permission2User[]

  @@map("permission")
}

model Permission2Role {
  id           Int        @id() @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt()
  createdBy    String?
  updatedBy    String?
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  isActive     Boolean    @default(true)

  @@unique([permissionId, roleId])
  @@map("permission_2_role")
}

model Permission2User {
  id           Int        @id() @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt()
  createdBy    String?
  updatedBy    String?
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  isActive     Boolean    @default(true)

  @@unique([permissionId, userId])
  @@map("permission_2_user")
}
