// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../__generated__/prisma-nestjs-graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
  reExport               = All
  purgeOutput            = true
  emitSingle             = true
}

generator prismaClassGenerator {
  provider                 = "prisma-class-generator"
  dryRun                   = false
  output                   = "../__generated__/prisma-class-generator"
  separateRelationFields   = true
  useNonNullableAssertions = false
}

generator primaClassValidatorGenerator {
  provider = "prisma-class-validator-generator"
  output   = "../__generated__/prisma-class-validator-generator"
}

generator erd {
  provider    = "prisma-erd-generator"
  output      = "../__generated__/ERD.svg"
  ignoreEnums = true
}

model User {
  id                          Int       @id @default(autoincrement())
  email                       String    @unique
  password                    String?
  isActive                    Boolean   @default(false)
  activationToken             String?   @unique
  activationTokenExpiresAt    DateTime?
  resetPasswordToken          String?   @unique
  resetPasswordTokenExpiresAt DateTime?
  lastLogin                   DateTime?
  hasTwoFA                    Boolean   @default(false)
  twoFAPhoneNumber            String?
  twoFAPPhoneVerified         Boolean   @default(false)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String?
  updatedBy     String?
  activatedAt   DateTime?
  activatedBy   String?
  deactivatedAt DateTime?
  deactivatedBy String?

  Otp             Otp[]
  Role2User       Role2User[]
  Permission2User Permission2User[]
  App2User        App2User[]

  @@map("user")
}

model ApiKey {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  key         String   @unique
  isActive    Boolean  @default(true)
  expiresAt   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api_key")
}

enum OtpUseCaseEnum {
  LOGIN
  D2FA
  PHV
}

model Otp {
  id     Int            @id @default(autoincrement())
  user   User           @relation(fields: [userId], references: [id])
  userId Int
  code   String
  use    OtpUseCaseEnum

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  @@map("otp")
}

model Role {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  Role2User       Role2User[]
  Permission2Role Permission2Role[]

  @@map("role")
}

model Permission {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  module   String
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Permission2Role Permission2Role[]
  Permission2User Permission2User[]

  @@map("permission")
}

model Role2User {
  id       Int     @id @default(autoincrement())
  role     Role    @relation(fields: [roleId], references: [id])
  roleId   Int
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  @@unique([roleId, userId])
  @@map("role_2_user")
}

model Permission2Role {
  id           Int        @id @default(autoincrement())
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  isActive     Boolean    @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  @@unique([permissionId, roleId])
  @@map("permission_2_role")
}

model Permission2User {
  id           Int        @id @default(autoincrement())
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  isActive     Boolean    @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  @@unique([permissionId, userId])
  @@map("permission_2_user")
}

model App {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  App2User  App2User[]

  @@map("app")
}

model App2User {
  id       Int     @id @default(autoincrement())
  app      App     @relation(fields: [appId], references: [id])
  appId    Int
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  @@unique([appId, userId])
  @@map("app_2_user")
}

model Log {
  id         Int      @id @default(autoincrement())
  userAgent  String?
  ip         String?
  method     String?
  headers    Json?
  url        String?
  body       Json?
  query      Json?
  params     Json?
  className  String?
  methodName String?
  username   String?
  response   Json?
  createdAt  DateTime @default(now())

  @@map("log")
}
